
-- Add assignments table for module 7
CREATE TABLE public.assignments (
  id bigint PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
  module_id bigint NOT NULL REFERENCES public.modules(id) ON DELETE CASCADE,
  title text NOT NULL,
  description text,
  due_date timestamp with time zone,
  max_score integer DEFAULT 100,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now()
);

-- Add assignment submissions table
CREATE TABLE public.assignment_submissions (
  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  assignment_id bigint NOT NULL REFERENCES public.assignments(id) ON DELETE CASCADE,
  user_id uuid NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
  submission_url text,
  submission_text text,
  submitted_at timestamp with time zone DEFAULT now(),
  score integer,
  feedback text,
  status text DEFAULT 'submitted' CHECK (status IN ('submitted', 'graded', 'needs_revision')),
  UNIQUE(assignment_id, user_id)
);

-- Add tests table for module quizzes
CREATE TABLE public.tests (
  id bigint PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
  module_id bigint NOT NULL REFERENCES public.modules(id) ON DELETE CASCADE,
  title text NOT NULL,
  description text,
  passing_score integer DEFAULT 80,
  created_at timestamp with time zone DEFAULT now()
);

-- Add test questions table
CREATE TABLE public.test_questions (
  id bigint PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
  test_id bigint NOT NULL REFERENCES public.tests(id) ON DELETE CASCADE,
  question text NOT NULL,
  option_a text NOT NULL,
  option_b text NOT NULL,
  option_c text NOT NULL,
  option_d text NOT NULL,
  correct_answer char(1) NOT NULL CHECK (correct_answer IN ('A', 'B', 'C', 'D')),
  order_number integer NOT NULL
);

-- Add test attempts table (without generated column)
CREATE TABLE public.test_attempts (
  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  test_id bigint NOT NULL REFERENCES public.tests(id) ON DELETE CASCADE,
  user_id uuid NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
  score integer NOT NULL,
  total_questions integer NOT NULL,
  answers jsonb, -- Store user answers as JSON
  completed_at timestamp with time zone DEFAULT now(),
  passed boolean DEFAULT false
);

-- Add grades to user_profiles
ALTER TABLE public.user_profiles 
ADD COLUMN overall_grade decimal(5,2),
ADD COLUMN certificate_earned boolean DEFAULT false,
ADD COLUMN certificate_issued_at timestamp with time zone;

-- Update user_progress to include test scores
ALTER TABLE public.user_progress
ADD COLUMN test_score integer,
ADD COLUMN assignment_score integer;

-- Enable RLS on new tables
ALTER TABLE public.assignments ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.assignment_submissions ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.tests ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.test_questions ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.test_attempts ENABLE ROW LEVEL SECURITY;

-- RLS policies for assignments (public read)
CREATE POLICY "Anyone can view assignments" ON public.assignments FOR SELECT USING (true);

-- RLS policies for assignment_submissions (users can only see their own)
CREATE POLICY "Users can view their own submissions" ON public.assignment_submissions 
  FOR SELECT USING (auth.uid() = user_id);
CREATE POLICY "Users can create their own submissions" ON public.assignment_submissions 
  FOR INSERT WITH CHECK (auth.uid() = user_id);
CREATE POLICY "Users can update their own submissions" ON public.assignment_submissions 
  FOR UPDATE USING (auth.uid() = user_id);

-- RLS policies for tests (public read)
CREATE POLICY "Anyone can view tests" ON public.tests FOR SELECT USING (true);

-- RLS policies for test_questions (public read)
CREATE POLICY "Anyone can view test questions" ON public.test_questions FOR SELECT USING (true);

-- RLS policies for test_attempts (users can only see their own)
CREATE POLICY "Users can view their own test attempts" ON public.test_attempts 
  FOR SELECT USING (auth.uid() = user_id);
CREATE POLICY "Users can create their own test attempts" ON public.test_attempts 
  FOR INSERT WITH CHECK (auth.uid() = user_id);

-- Function to update test attempt passed status
CREATE OR REPLACE FUNCTION update_test_attempt_passed()
RETURNS TRIGGER AS $$
BEGIN
  NEW.passed = NEW.score >= (SELECT passing_score FROM tests WHERE id = NEW.test_id);
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Trigger to automatically update passed status
CREATE TRIGGER update_test_attempt_passed_trigger
  BEFORE INSERT OR UPDATE ON test_attempts
  FOR EACH ROW
  EXECUTE FUNCTION update_test_attempt_passed();
